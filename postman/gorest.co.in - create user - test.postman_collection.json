{
	"info": {
		"_postman_id": "464fc151-07d7-4edf-8b2b-50e528901c4a",
		"name": "gorest.co.in | create user | test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8989503"
	},
	"item": [
		{
			"name": "Create User with Auth",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name = pm.variables.replaceIn(\"{{$randomFullName}}\")\r",
							"var email = pm.variables.replaceIn(\"{{$randomEmail}}\")\r",
							"\r",
							"var newUser = {\r",
							"    \"name\": name,\r",
							"    \"email\": email,\r",
							"    \"gender\": \"male\",\r",
							"    \"status\": \"active\"\r",
							"}\r",
							"pm.environment.set(\"new_user\", JSON.stringify(newUser));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is Created\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response Code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equal(201);\r",
							"});\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\":{\r",
							"        \r",
							"    \"id\":{\r",
							"        \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"        \"type\": \"string\"\r",
							"    },\r",
							"    \"email\": {\r",
							"        \"type\": \"string\"\r",
							"    },\r",
							"    \"gender\": {\r",
							"        \"type\": \"string\",\r",
							"        \"pattern\": \"male|female\",\r",
							"    },\r",
							"    \"status\": {\r",
							"        \"type\":\"string\"\r",
							"    },\r",
							"    \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"email\",\r",
							"    \"gender\",\r",
							"    \"status\"\r",
							"  ]\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Response schema is valid', function () {\r",
							"     var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedUser = JSON.parse(pm.environment.get(\"new_user\"));\r",
							"    pm.expect(jsonData.name).to.eql(expectedUser.name);\r",
							"    pm.expect(jsonData.email).to.eql(expectedUser.email);\r",
							"    pm.expect(jsonData.gender).to.eql(expectedUser.gender);\r",
							"    pm.expect(jsonData.status).to.eql(expectedUser.status);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{new_user}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/public/v2/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User without Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is Unauthorized\", function () {\r",
							"    pm.response.to.have.status(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response Code is 401\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equal(401);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/public/v2/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User With Empty body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is Unprocessable Entity\", function () {\r",
							"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response Code is 422\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equal(422);\r",
							"});\r",
							"\r",
							"\r",
							"var a = [{\"field\":\"email\",\"message\":\"can't be blank\"},{\"field\":\"name\",\"message\":\"can't be blank\"},{\"field\":\"gender\",\"message\":\"can't be blank, can be male of female\"},{\"field\":\"status\",\"message\":\"can't be blank\"}];\r",
							"\r",
							"pm.test(\"Response Body errors\", function () {\r",
							"    var jsonData = pm.response.json()\r",
							"    pm.expect(jsonData).to.have.lengthOf(4);\r",
							"    pm.expect(jsonData).to.be.deep.equal(a)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/public/v2/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User With Invalid Email",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": {{$randomFullName}},\r\n    \"email\": {{$randomEmail}},\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/public/v2/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User With already taken email",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is Unprocessable Entity\", function () {\r",
							"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response Code is 422\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equal(422);\r",
							"});\r",
							"\r",
							"\r",
							"var expectedResponse = [\r",
							"    {\r",
							"        \"field\": \"email\",\r",
							"        \"message\": \"has already been taken\"\r",
							"    }\r",
							"];\r",
							"\r",
							"pm.test(\"Response Body errors\", function () {\r",
							"    var jsonData = pm.response.json()\r",
							"    pm.expect(jsonData).to.have.lengthOf(1);\r",
							"    pm.expect(jsonData).to.be.deep.equal(expectedResponse)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{new_user}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/public/v2/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User With Invalid Gender",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is Unprocessable Entity\", function () {\r",
							"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response Code is 422\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equal(422);\r",
							"});\r",
							"\r",
							"\r",
							"var expectedResponse = [\r",
							"    {\r",
							"        \"field\": \"gender\",\r",
							"        \"message\": \"can't be blank, can be male of female\"\r",
							"    }\r",
							"];\r",
							"\r",
							"pm.test(\"Response Body errors\", function () {\r",
							"    var jsonData = pm.response.json()\r",
							"    pm.expect(jsonData).to.have.lengthOf(1);\r",
							"    pm.expect(jsonData).to.be.deep.equal(expectedResponse)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"gender\": \"male1\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/public/v2/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User With Invalid Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is Unprocessable Entity\", function () {\r",
							"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response Code is 422\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equal(422);\r",
							"});\r",
							"\r",
							"\r",
							"var expectedResponse = [\r",
							"    {\r",
							"        \"field\": \"status\",\r",
							"        \"message\": \"can't be blank, message about proper values is expected here\"\r",
							"    }\r",
							"];\r",
							"\r",
							"pm.test(\"Response Body errors\", function () {\r",
							"    var jsonData = pm.response.json()\r",
							"    pm.expect(jsonData).to.have.lengthOf(1);\r",
							"    pm.expect(jsonData).to.be.deep.equal(expectedResponse)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/public/v2/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User With Malformed JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is Unprocessable Entity\", function () {\r",
							"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response Code is 422\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equal(422);\r",
							"});\r",
							"\r",
							"\r",
							"var expectedResponse = [\r",
							"    {\r",
							"        \"field\": \"status\",\r",
							"        \"message\": \"can't be blank, message about proper values is expected here\"\r",
							"    }\r",
							"];\r",
							"\r",
							"pm.test(\"Response Body errors\", function () {\r",
							"    var jsonData = pm.response.json()\r",
							"    pm.expect(jsonData).to.have.lengthOf(1);\r",
							"    pm.expect(jsonData).to.be.deep.equal(expectedResponse)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/public/v2/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User using graphql",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer ACCESS-TOKEN"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"query\":\"mutation{createUser(input: {name: \\\"Tenali Ramakrishna\\\" gender: \\\"male\\\" email: \\\"{{$randomEmail}}\\\" status: \\\"active\\\"}) {user{id name gender email status}}}\"}"
				},
				"url": {
					"raw": "https://gorest.co.in/public/v2/graphql",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"graphql"
					]
				}
			},
			"response": []
		}
	]
}